#%RAML 1.0
title: Accounts
version: v0.10.0
description: !include docs/apiDescription.md
baseUri: https://www.bbvaapis.com/accounts/v0

uses:
  checkbooks: types/checkbooks.raml
  balances: types/balances.raml
  block: types/block.raml
  blocks: types/blocks.raml
  account: types/account.raml
  accounts: types/accounts.raml
  transactions: types/transactions.raml
  indicators: types/indicators.raml
  conditions: types/conditions.raml
  relatedContract: types/relatedContract.raml
  relatedContracts: types/relatedContracts.raml
  participants: types/participants.raml
  limits: types/limits.raml
  limit: types/limit.raml
  activation: types/activation.raml
  activations: types/activations.raml
  pagination: ../global-apis-commons-commons-v0/types/pagination.raml
  holds: types/holds.raml
  customizedFormat: types/customizedFormat.raml
  customizedFormats: types/customizedFormats.raml
  paymentMethods: types/paymentMethods.raml

annotationTypes:
  countrySpecific: !include ../global-apis-commons-commons-v0/annotations/countrySpecific.raml
  exampleInput: !include ../global-apis-commons-commons-v0/annotations/exampleInput.raml
  enumDescription: !include ../global-apis-commons-commons-v0/annotations/enumDescription.raml
  countryException: !include ../global-apis-commons-commons-v0/annotations/countryException.raml

traits:
  deprecated: !include ../global-apis-commons-commons-v0/traits/deprecated.raml
  sortable: !include ../global-apis-commons-commons-v0/traits/sortable.raml
  pageable: !include ../global-apis-commons-commons-v0/traits/pageable.raml
  searchable: !include ../global-apis-commons-commons-v0/traits/searchable.raml
  viewable: !include ../global-apis-commons-commons-v0/traits/viewable.raml
  expandable: !include ../global-apis-commons-commons-v0/traits/expandable.raml
  fieldable: !include ../global-apis-commons-commons-v0/traits/fieldable.raml

resourceTypes:
  pageable-collection: !include ../global-apis-commons-commons-v0/resourceTypes/pageable-collection.raml
  collection: !include ../global-apis-commons-commons-v0/resourceTypes/collection.raml
  collection-item: !include ../global-apis-commons-commons-v0/resourceTypes/collection-item.raml

/accounts:
  description: |
    Service for retrieving the user´s accounts.

  type: pageable-collection

  get:
    description: |
      Method for retrieving the list of accounts associated to a specific user.
    is: [sortable: {fieldsList: "openingDate", defaultField: "openingDate"}, expandable: {subEntities: "indicators, checkbooks, blocks, transactions, related-contracts, conditions, participants, limits, holds, customized-formats, activations, payment-methods", example: "indicators"}, pageable, viewable: {viewsList: "basic, full", example: "basic"}, fieldable: {example: "number,alias"}]

    queryParameters:
      accountId:
        description: "Filters the account's list by account identifier."
        type: string
        required: false
        example: "1234"
      numberType.id:
        description: "Filters the account's list by account number type."
        type: string
        enum: [CCC, IBAN, SWIFT, CLABE, LIC]
        (countrySpecific):
          - country: ES
            description: CCC applies only to Spain
          - country: MX
            description: CLABE applies only to Mexico
          - country: US
            description: RN applies only to US
        (enumDescription):
          - CCC: Código Cuenta Cliente, Spanish for "Customer Account Code". It is a name given in Spain to a standard Bank Account
          - IBAN: Internacional Bank Account Number. Is the standard 'EBS204', also according to the ISO 13616, of the European Committee for Banking Standards for identify Bank Accounts
          - SWIFT: Society for Worldwide Interbank Financial Telecommunication. Provides the Bank Identifier Code (BIC) that identifies financial institutions, without going into the specific account
          - CLABE: Clave Bancaria Estandarizada, Spanish for "Standardized Banking Cipher". It is a banking standard for the numbering of bank accounts in Mexico
          - LIC: Local Internal Code. This code is a BBVA internal code generated by those countries where there's no official regulation for numbering bank accounts
          - RN: Account with routing number. A routing number is a nine digit code that identifies a financial institution.
        required: false
        example: "CCC"
      number:
        description: "Filters the account's list by account number."
        type: string
        required: false
        example: "ES90 0182 1642 0302 0153 7412"
      accountType.id:
        description: "Filters the account's list by account type."
        type: string
        enum: ["COMMON_ACCOUNT", "CURRENCY_ACCOUNT", "CREDIT_ACCOUNT", "CREDIT_CURRENCY_ACCOUNT"]
        (enumDescription):
          - COMMON_ACCOUNT: Customers can make local currency-based incomes\expenses over accounts of this kind. Customers can make use of these accounts' balance through ATMs and branches.
          - CURRENCY_ACCOUNT: Customers can make foreign currency-based incomes\expenses over accounts of this kind. Customers can make use of these accounts' balance through ATMs and branches.
          - CREDIT_ACCOUNT: Kind of account in which the customer is granted a monetary amount in the local currency. This granted credit is available for a period of time. Customers can make use of these accounts' balance through ATMs and branches.
          - CREDIT_CURRENCY_ACCOUNT: Kind of account in which the customer is granted a monetary amount in a foreign currency. This granted credit is available for a period of time. Customers can make use of these accounts' balance through ATMs and branches.
        required: false
        example: "COMMON_ACCOUNT"
      title.id:
        description: "Filters the account's list by account title."
        type: string
        required: false
        example: "VISA_REPSOL"
      alias:
        description: "Filters the account's list by account alias."
        type: string
        required: false
        example: "Nacho's Account"
      status.id: 
        description: "Filters the account's list by account status."
        type: string
        enum: ["ABANDONED","ACTIVATED", "BLOCKED", "CANCELED","DORMANT", "ESCHEATED"]
        (enumDescription):
          - ABANDONED: An account that has been dormant for at least 3 years.
          - ACTIVATED: The account is fully operative.
          - BLOCKED: The account has been blocked by a justified reason.
          - CANCELED: The account is canceled and the user can't operate with it.
          - ESCHEATED: An account in an abandoned state can be moved to this state if the owner cannot be contacted. The funds are then a property of the state.
          - DORMANT: An account that is unused for 361 days.
        (countryException):
          - country: US
            description: ABANDONED,DORMANT, and ESCHEATED applies to the US
          - country: CL
            description: BLOCKED does not apply to Chile.
        required: false
        example: "BLOCKED"
      fromGrantedCredits.amount:
        description: "Filters the account's list by lower limit of the granted credit amount. This filter applies to grantedCredits.amount attribute."
        type: number
        required: false
        example: 1000
      toGrantedCredits.amount:
        description: "Filters the account's list by upper limit of the granted credit amount. This filter applies to grantedCredits.amount attribute."
        type: number
        required: false
        example: 3000
      grantedCredits.amount:
        description: "Filters the account's list by equal limit of the granted credit amount."
        type: number
        required: false
        example: 1500
      grantedCredits.currency:
        description: "Filters the account's list by currency associated to granted credit account."
        type: string
        required: false
        example: "USD"
      fromAvailableBalance.currentBalances.amount:
        description: "Filters the account's list by lower limit of the account current balance amount. This filter applies to availableBalance.currentBalances.amount attribute."
        type: number
        required: false
        example: 1000
      toAvailableBalance.currentBalances.amount:
        description: "Filters the account's list by upper limit of the account current balance amount. This filter applies to availableBalance.currentBalances.amount attribute."
        type: number
        required: false
        example: 1000
      availableBalance.currentBalances.amount:
        description: "Filters the account's list by equal limit of the account current balance amount."
        type: number
        required: false
        example: 1000
      availableBalance.currentBalances.currency:
        description: "Filters the account's list by account current balance currency."
        type: string
        required: false
        example: EUR
      fromDisposedBalance.currentBalances.amount:
        description: "Filters the account's list by lower limit of the spent balance amount. This filter applies to disposedBalance.currentBalances.amount attribute."
        type: number
        required: false
        example: 900
      toDisposedBalance.currentBalances.amount:
        description: "Filters the account's list by upper limit of the spent balance amount. This filter applies to disposedBalance.currentBalances.amount attribute."
        type: number
        required: false
        example: 200
      disposedBalance.currentBalances.amount:
        description: "Filters the account's list by equal limit of the spent balance amount."
        type: number
        required: false
        example: 400
      disposedBalance.currentBalances.currency:
        description: "Filters the account's list by currency associated to disposed balance."
        type: string
        required: false
        example: "USD"
      currencies.currency:
        description: "Filters the account's list by account's currency."
        type: string
        required: false
        example: EUR
      currencies.isMajor:
        description: "Filters the account's list by account's major currency."
        type: boolean
        required: false
        example: true
    responses:
      200:
        body:
          application/json:
            examples:
              simplest:
                value: !include examples/accounts/get_200.json
                description: JSON output example for the simplest call GET /accounts
                displayName: Basic view JSON output example
              expandIndicators:
                value: !include examples/accounts/get_200_expands_indicators.json
                description: JSON output example for expanding indicators GET /accounts?expand=indicators
                displayName: Expand JSON output example
            type: object
            properties:
              data:
                type: accounts.accounts

      206:
        body:
          application/json:
            example: !include examples/accounts/get_206.json
            type: object
            properties:
              data:
                type: accounts.accounts
              pagination:
                type: pagination.pagination
  post:
    description: |
      Method to orginate a new customer account.

    body:
      application/json:
        examples:
          common:
            value: !include examples/accounts/post_request.json
            description: JSON input example for call POST /accounts for common account
            displayName: Basic JSON input example for originating a new common account
          checking:
            value: !include examples/accounts/post_checking_account_request.json
            description: JSON input example for call POST /accounts for checking account
            displayName: Basic JSON input example for originating a new checking account
          credit:
            value: !include examples/accounts/post_credit_account_request.json
            description: JSON input example for call POST /accounts for credit account
            displayName: Basic JSON input example for originating a new credit account
        type: account.account
    responses:
      201:
        headers:
          Location:
            displayName: location
            description: This header must provide the URI to reach the created resource.
            type: string
            required: true
            example: "/accounts/100"
        body:
          application/json:
            example: !include examples/accounts/post_201.json
            type: object
            properties:
              data:
                type: account.account

  /{account-id}:
    description: |
      Service for managing the information of a specific account.

    uriParameters:
      account-id:
        description: "Unique account identifier"
        type: string
        example: "1234"
    type: collection-item

    get:
      description: |
          Method for retrieving the information associated to a specific account.

      is: [expandable: {subEntities: "indicators, checkbooks, blocks, transactions, related-contracts, conditions, participants, limits, holds, customized-formats, activations, payment-methods", example: "indicators"}, fieldable: {example: "number,alias"}]

      responses:
        200:
          body:
            application/json:
              examples:
                common:
                  value: !include examples/accounts/accountId/get_200_common_account.json
                  name: Common account
                  displayName: Common account JSON output example
                  description: JSON example output for a single common account
                credit:
                  value: !include examples/accounts/accountId/get_200_credit_account.json
                  name: Credit account
                  displayName: Credit account JSON output example
                  description: JSON example output for a single credit account
                checking:
                  value: !include examples/accounts/accountId/get_200_checking_account.json
                  name: Checking account
                  displayName: Checking account JSON output example
                  description: JSON example output for a single checking account
              type: object
              properties:
                data:
                  type: account.account

    patch:
      description: |
        Method for updating the attributes of an account.

      body:
        application/json:
          examples:
            simpliest:
              value: !include examples/accounts/accountId/patch_request_min.json
              name: Simpliest account patch
              displayName: Simplest account modification JSON input example
              description: JSON example input for the simpliest modification of an account
            full:
              value: !include examples/accounts/accountId/patch_request_full.json
              name: Full account patch
              displayName: Full account modification JSON input example
              description: JSON example input for a full modification of an account
          type: account.account
      responses:
        200:
          description: Ok.

    /payment-methods:
      description: |
        Service for managing the differents payment methods in an account.

      type: collection
      get:
        description: |
          Method for retrieving the payment methods associated to an account.

          This method is the configuration selected by the user for paying the credit debt terms. The amounts are calculated based on the existing total debt amount at the end of the last period.

        responses:
          200:
            body:
              application/json:
                example: !include examples/accounts/accountId/payment-methods/get_200.json
                type: object
                properties:
                  data:
                    type: paymentMethods.paymentMethods

          404:
            description: Not Found

    /blocks:
      description: |
        Service for managing the differents blocks in an account.

        An account can be blocked for different reasons, for instance in the event of fraud. The bank can also block an account due to other security reasons.

        A block doesn't block an amount of money, it blocks all the account. If the account is blocked, the user will not be able to perform any operation with it.

      type: collection
      get:
        description: |
          Method for retrieving the blocks associated to an account.

        responses:
          200:
            body:
              application/json:
                example: !include examples/accounts/accountId/blocks/get_200.json
                type: object
                properties:
                  data:
                    type: blocks.blocks

          404:
            description: Not Found

      post:
        description: Method for blocking an account.
        body:
          application/json:
            example: !include examples/accounts/accountId/blocks/post_request.json
            type: block.block
        responses:
          201:
            headers:
              Location:
                displayName: location
                description: This header must provide the URI to reach the created resource.
                type: string
                required: true
                example: "/accounts/1234/blocks"
            body:
              application/json:
                example: !include examples/accounts/accountId/blocks/post_201.json
                type: object
                properties:
                  data:
                    type: block.block
          404:
            description: Not Found


    /transactions:
      description: |
        Service for managing all the transactions related to a specific account.

        VirtualService:
        - API: Transactions
        - MasterService: GET /transactions
        - Linked by: accountId 

      type: pageable-collection
      get:
        description: |
          Method for retrieving all transactions that match with searching criteria. These criteria parameters may be concept, financing type, contract, operation date, transaction type and the currency that was used for the differents operations.

        is: [pageable, sortable: {fieldsList: "operationDate, localAmount.amount or concept", defaultField: "operationDate"}, fieldable: {example: "operationDate,localAmount.amount,concept"}]

        queryParameters:
          operationDate:
            description: "Filters the transactions which operation date is equal to this one (ISO-8601 date format)."
            type: datetime
            example: 2016-02-28T16:41:41.090Z
            required: false
          fromOperationDate:
            description: "Filters the transactions which operation date is later than this one (ISO-8601 date format)."
            type: datetime
            example: 2016-02-28T16:41:41.090Z
            required: false
          toOperationDate:
            description: "Filters the transactions which operation date is earlier than this one (ISO-8601 date format)."
            type: datetime
            example: 2016-03-15T11:34:28.112Z
            required: false
          localAmount.amount:
            description: "Filters the transactions which local amount is equal to this one."
            type: string
            example: "16.89"
            required: false
          fromLocalAmount.amount:
            description: "Filters the transactions which local amount is higher than this one."
            type: string
            example: "16.89"
            required: false
          toLocalAmount.amount:
            description: "Filters the transactions which local amount is lower than this one."
            type: string
            example: "16.89"
            required: false
          moneyFlow.id:
            description: "Filters the transactions which moneyFlow attribute matches with this one."
            type: string
            example: "EXPENSE"
            required: false
          localAmount.currency:
            description: "Filters the transactions by their local currency. String based on ISO-4217 must be used to identify the currency."
            type: string
            example: USD
            required: false
          transactionType.id:
            description: "Filters the transactions by their transaction type."
            type: string
            example: PURCHASE
            required: false
          transactionType.internalCode.id:
            description: "Filters the transactions by their transaction code."
            type: string
            example: "000718"
            required: false
          financingType.id:
            description: "Filters the transactions by their financing type."
            type: string
            example: FINANCIABLE
            required: false
          contract.number:
            description: "Filters the transactions by contract number."
            type: string
            example: ES90 0182 1642 0302 0153 7412
            required: false
          contract.product.id:
            description: "Filters the transactions by contract's product."
            type: string
            example: DEPOSITS
            required: false
          concept:
            description: "Filters the transactions by their concept."
            type: string
            example: Transfer to John Peters' account
            required: false

        responses:
          200:
            body:
              application/json:
                example: !include examples/accounts/accountId/transactions/get_200.json
                type: object
                properties:
                  data:
                    type: transactions.transactions

          206:
            body:
              application/json:
                example: !include examples/accounts/accountId/transactions/get_206.json
                type: object
                properties:
                  data:
                    type: transactions.transactions
                  pagination:
                    type: pagination.pagination

          404:
            description: Not Found

    /checkbooks:
      description: |
        Service for managing the checkbooks associated to an account.

        A checkbook is a booklet of blank checks related to an account. A check enables a user to withdraw money from the account related to the checkbook.

      type: pageable-collection
      get:
        description: |
          Method for retrieving the list of checkbooks associated to an account.

        is: [pageable]

        responses:
          200:
            body:
              application/json:
                example: !include  examples/accounts/accountId/checkbooks/get_200.json
                type: object
                properties:
                  data:
                    type: checkbooks.checkbooks


          206:
            body:
              application/json:
                example: !include examples/accounts/accountId/checkbooks/get_206.json
                type: object
                properties:
                  data:
                    type: checkbooks.checkbooks
                  pagination:
                    type: pagination.pagination
          404:
            description: Not Found


    /indicators:
      description: |
        Service for managing the behavior indicators associated to an account.

        An indicator allows to perform a specific action over a user's account.

      type: pageable-collection
      get:
        description: |
          Method for retrieving the list of indicators associated to an account.

        is: [sortable: {fieldsList: "indicatorId",  defaultField: "indicatorId"}, pageable]

        responses:
          200:
            body:
              application/json:
                example: !include  examples/accounts/accountId/indicators/get_200.json
                type: object
                properties:
                  data:
                    type: indicators.indicators


          206:
            body:
              application/json:
                example: !include examples/accounts/accountId/indicators/get_206.json
                type: object
                properties:
                  data:
                    type: indicators.indicators
                  pagination:
                    type: pagination.pagination
          404:
            description: Not Found

    /conditions:
      description: |
        Service for retrieving the conditions (fees and other account maintenance related payments).

      type: collection
      get:
        description: |
          Method for retrieving the conditions of the given account.

        responses:
          200:
            body:
              application/json:
                example: !include examples/accounts/accountId/conditions/get_200.json
                type: object
                properties:
                  data:
                    type: conditions.conditions
          404:
            description: Not Found
    /participants:
      description: |
        Service for managing the participants associated to an account.

        A participant is any allowed person by the account holder who has permissions over an account to make operations.

      type: collection
      get:
        description: |
          Method for retrieving the list of participants associated to an account.

        is: [sortable: {fieldsList: "participantId",  defaultField: "participantId"}]

        responses:
          200:
            body:
              application/json:
                example: !include examples/accounts/accountId/participants/get_200.json
                type: object
                properties:
                  data:
                    type: participants.participants
          404:
            description: Not Found
    /related-contracts:
      description: |
        Service for managing the related contracts of an account.

        An account can have several related contracts, each one associated with a different type of relationship.

      type: collection
      get:
        description: |
          Method for retrieving the related contracts of an account.
        responses:
          200:
            body:
              application/json:
                example: !include examples/accounts/accountId/related-contracts/get_200.json
                type: object
                properties:
                  data:
                    type: relatedContracts.relatedContracts
          404:
            description: Not Found
      post:
        description: |
          Method for adding a new related contract to an account.
        body:
          application/json:
            example: !include examples/accounts/accountId/related-contracts/post_request.json
            type: relatedContract.relatedContract
        responses:
          201:
            headers:
              Location:
                displayName: location
                description: This header must provide the URI to reach the created resource.
                type: string
                required: true
                example: /accounts/1234/related-contracts/1ab23nsan3-12327
            body:
              application/json:
                example: !include examples/accounts/accountId/related-contracts/post_201.json
                type: object
                properties:
                  data:
                    type: relatedContract.relatedContract
          404:
            description: Not Found
      /{related-contract-id}:
        uriParameters:
          related-contract-id:
            description: "Unique related contract identifier"
            type: string
            example: 1ab23nsan3-12327
        description: |
          Service for managing the specified related contract of a given account.
        type: collection-item
        patch:
          description: |
            Method for modifying a related contract to an account.
          body:
            application/json:
              example: !include examples/accounts/accountId/related-contracts/related-contract-id/patch_request.json
              type: relatedContract.relatedContract
          responses:
            200:
              body:
                application/json:
                  example: !include examples/accounts/accountId/related-contracts/related-contract-id/patch_200.json
                  type: object
                  properties:
                    data:
                      type: relatedContract.relatedContract
            404:
              description: Not Found
        delete:
          description: |
            Method for unrelating a contract from an account. Once the relation between the related contract and the account is dropped, no more operation will be performed between them. This method does not affect the account or the related contract themselves, but only erase the relationship between them.
          responses:
            200:
              description: Ok.

    /limits:
      description: |
        Service for managing the limits related to the current account. These limits are, by default, inherited from the financial product related to the account. These limits are not intended to be modified after the financial product is hired. However, they may be modified under special circumstances (negotiation between the customer and the bank, setting the limit during hiring process...).

      type: collection
      get:
        description: |
          Method for retrieving the limits related to the current account.
        responses:
          200:
            body:
              application/json:
                example: !include examples/accounts/accountId/limits/get_200.json
                properties:
                  data:
                    type: limits.limits
          404:
            description: Not Found

      /{limit-id}:
        description: |
          Service for managing the configuration of a specific limit related to the current account.
        uriParameters:
          limit-id:
            description: "Unique limit identifier"
            type: string
            example: MAXIMUM_CREDIT
        type: collection-item
        put:
          description: |
            Method for updating the configuration of a specific limit related to the current account.
          body:
            application/json:
              example: !include examples/accounts/accountId/limits/limit-id/put_request.json
              type: limit.limit

          responses:
            200:
              description: Ok.
            201:
              description: Created.
              headers:
                Location:
                  displayName: location
                  description: This header must provide the URI to reach the created resource.
                  type: string
                  required: true
                  example: "/accounts/1234/limits/MAXIMUM_CREDIT"
    /holds:
      description: |
        Service for managing the existing holds over the current account.

        A hold is an amount of the account that may not be withdrawn until an item has been collected, or until a specific check or debit is posted.
      type: collection
      get:
        description: |
          Method for retrieving the existing holds over the current account.
        responses:
          200:
            body:
              application/json:
                example: !include examples/accounts/accountId/holds/get_200.json
                properties:
                  data:
                    type: holds.holds
          404:
            description: Not Found

    /customized-formats:
      description: |
        Service for managing the specifics formats to the current account.

      type: collection
      get:
        description: |
          Method for retrieving the specifics formats to the current account.
        responses:
          200:
            body:
              application/json:
                example: !include examples/accounts/accountId/customized-formats/get_200.json
                properties:
                  data:
                    type: customizedFormats.customizedFormats
          404:
            description: Not Found

      /{customized-format-id}:
        description: |
          Service for managing the association of a specific format to the current account
        uriParameters:
          customized-format-id:
            description: "Identifier customized format associated to the value of account number."
            type: string
            example: SPEI
        type: collection-item
        put:
          description: |
            Method for updating of the format to the current account.

          body:
            application/json:
              example: !include examples/accounts/accountId/customized-formats/customized-format-id/put_request.json
              type: customizedFormat.customizedFormat

          responses:
            200:
            201:
              description: Created.
              headers:
                Location:
                  displayName: location
                  description: This header must provide the URI to reach the created resource.
                  type: string
                  required: true
                  example: "/accounts/1234/customized-formats/SPEI"
        delete:
          description: |
            Method for delete the specific format to the current account.
          responses:
            200:
              description: Ok.

    /activations:
      description: |
        Service for managing the operational activations related to a specific account. An operational activation is an account operation the user can customize. The activation or deactivation of a specific operative has no effect over the account status.
      type: collection
      get:
        description:  |
          Method for retrieving the list of operational activations related to the current account.
        responses:
          200:
            body:
              application/json:
                example: !include examples/accounts/accountId/activations/get_200.json
                type: object
                properties:
                  data:
                    type: activations.activations
          404:
            description: Not Found
      /{activation-id}:
        description: |
          Service for managing an operational activation related to an account.
        uriParameters:
          activation-id:
            description: "Unique activation identifier"
            type: string
            enum: [CREDIT_OPERATIONS, CHECK_OPERATIONS, DEBIT_OPERATIONS]
            (enumDescription):
              - CREDIT_OPERATIONS: If enabled, the account can be used for performing credit operations, otherwise this functionality is disabled
              - CHECK_OPERATIONS: If enabled, the account can be used to write checks, otherwise this functionality is disabled
              - DEBIT_OPERATIONS: If enabled, the account can be used for performing debit operations, otherwise this functionality is disabled
            example: CREDIT_OPERATIONS
        type: collection-item
        get:
          description:  |
            Method for retrieving an operational activation related to an account.
          responses:
            200:
              body:
                application/json:
                  examples:
                    full:
                      value: !include examples/accounts/accountId/activations/activationId/get_200_full.json
                      description: JSON output example with all attributes for an activation.
                      displayName: Full activation JSON response
                    credit:
                      value: !include examples/accounts/accountId/activations/activationId/get_200_credit.json
                      description: JSON output example with attributes for credit activation.
                      displayName: Credit activation JSON response
                    check:
                      value: !include examples/accounts/accountId/activations/activationId/get_200_check.json
                      description: JSON output example with attributes for check activation.
                      displayName: Check activation JSON response
                    debit:
                      value: !include examples/accounts/accountId/activations/activationId/get_200_debit.json
                      description: JSON output example with attributes for debit activation.
                      displayName: Debit activation JSON response
                  type: object
                  properties:
                    data:
                      type: activation.activation

        patch:
           description:  |
              Method for updating an operational activation related to an account.
           body:
             application/json:
               examples:
                 full:
                   value: !include examples/accounts/accountId/activations/activationId/patch_request_full.json
                   description: JSON input example for modifying all attributes for an activation.
                   displayName: Full activation modification JSON request
                 usa-credit:
                   value: !include examples/accounts/accountId/activations/activationId/patch_request_credit.json
                   description: JSON input example for modifying a credit activation.
                   displayName: Credit activation modification JSON request
                 usa-check:
                   value: !include examples/accounts/accountId/activations/activationId/patch_request_check.json
                   description: JSON input example for modifying a chack activation.
                   displayName: Check activation modification JSON request
                 usa-debit:
                   value: !include examples/accounts/accountId/activations/activationId/patch_request_debit.json
                   description: JSON input example for modifying a debit activation.
                   displayName: Debit activation modification JSON request
               type: activation.activation
           responses:
             200:

/balances:
  description: |
    Service for retrieving the aggregate balance of the accounts. The aggregate balance is the total of all of a user's account balances at the moment of retrieval.

  type: collection
  get:
    description: |
      Method for retrieving the aggregate balance of the accounts associated to the user.

    queryParameters:
      accountType.id:
        description: "Filters the account's list by account type."
        type: string
        enum: ["COMMON_ACCOUNT", "CURRENCY_ACCOUNT", "CREDIT_ACCOUNT", "CREDIT_CURRENCY_ACCOUNT"]
        (enumDescription):
          - COMMON_ACCOUNT: Customers can make local currency-based incomes\expenses over accounts of this kind. Customers can make use of these accounts' balance through ATMs and branches.
          - CURRENCY_ACCOUNT: Customers can make foreign currency-based incomes\expenses over accounts of this kind. Customers can make use of these accounts' balance through ATMs and branches.
          - CREDIT_ACCOUNT: Kind of account in which the customer is granted a monetary amount in the local currency. This granted credit is available for a period of time. Customers can make use of these accounts' balance through ATMs and branches.
          - CREDIT_CURRENCY_ACCOUNT: Kind of account in which the customer is granted a monetary amount in a foreign currency. This granted credit is available for a period of time. Customers can make use of these accounts' balance through ATMs and branches.
        required: false
        example: "COMMON_ACCOUNT"
    responses:
      200:
        body:
          application/json:
            example: !include examples/balances/get_200.json
            type: object
            properties:
              data:
                type: balances.balances
